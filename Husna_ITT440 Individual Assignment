#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>

#define MAXIMUM_CHILD 10
#define BFR_SIZE 1024

void interrupt_handler(int signal) 
{
    printf("\nInterrupt signal received. Exiting...\n");
    exit(0);
}

int main() 
{
    int num_child, i;
    int fd[MAXIMUM_CHILD][2]; 
    pid_t pid[MAXIMUM_CHILD]; 
    
    signal(SIGINT, interrupt_handler);

    printf("Enter the number of child processes to create: ");
    scanf("%d", &num_child);

    if (num_child > MAXIMUM_CHILD) 
    {
        printf("Maximum number of child processes have been exceeded.\n");
        exit(1);
    }

    
    for (i = 0; i < num_child; i++) 
    {
        if (pipe(fd[i]) == -1) 
        {
            printf("Error : Failed to create the pipe.\n");
            exit(1);
        }
        
        pid[i] = fork();
        
        if (pid[i] < 0) 
        {
            printf("Error : Failed to fork the child processes.\n");
            exit(1);
        } 
        
        else if (pid[i] == 0) 
        { 
            close(fd[i][1]); 
            char buffer[BFR_SIZE];
            
            while (read(fd[i][0], buffer, BFR_SIZE) > 0) 
            { 
                printf("The child %d received the message: %s\n", i+1, buffer);
            }
            close(fd[i][0]); 
            exit(0);
        } 
        
        else
        { 
            close(fd[i][0]); 
        }
    }

    
    char message[BFR_SIZE];
    printf("Please enter the message to send to the child processes: ");
    scanf("%s", message);
    
    for (i = 0; i < num_child; i++)
    {
        write(fd[i][1], message, BFR_SIZE); 
        close(fd[i][1]); 
    }

    
    for (i = 0; i < num_child; i++) 
    {
        waitpid(pid[i], NULL, 0);
    }

    return 0;
}
